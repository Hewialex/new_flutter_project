rules_version = '2';


service cloud.firestore {

  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isVerifiedEmail() {
      return request.auth.token.email_verified;
    }

    // user collection
    match /users/{uid} {
      function isOwner() {
        return request.auth.uid == uid;
      }

      function genderIsNotModified() {
        return request.resource.data.gender == resource.data.gender;
      }

      function profileAlreadyCreated() {
        return !exists(/databases/$(database)/documents/users/$(request.auth.uid));
      }

      function profileViewIsPublic() {
        // in the settings collection, the
        return true;
      }

      // user can write their own data only
      allow create:
        if isSignedIn() && isVerifiedEmail() && isOwner() && profileAlreadyCreated();

      allow update: if isSignedIn() && isOwner() && genderIsNotModified();

      // only owner can read self profile. we'll add more rules later
      allow get: if isSignedIn() && isVerifiedEmail() && isOwner();

      allow list;
    }
  }

  // forum collection
  match /forums/{forumId} {
    function isForumOwner() {
      return request.auth.uid == resource.data.uid;
    }

    function forumFieldsAreValidTypes() {
      return request.resource.data.keys().hasAll(['uid', 'title', 'content']) &&
        request.resource.data.uid is string &&
        request.resource.data.title is string &&
        request.resource.data.content is string;
    }

    allow create: if isSignedIn() && isVerifiedEmail() && forumFieldsAreValidTypes();

    allow read: if isSignedIn() && isVerifiedEmail(); // anyone can read forums

    allow update, delete: if isSignedIn() && isForumOwner(); // only signed in user can update or delete
  }

  // forum comment collection
  match /forums/{forumId}/comments/{commentId} {
    function isCommentOwner() {
      return request.auth.uid == resource.data.uid;
    }

    function commentFieldsAreValidTypes() {
      return request.resource.data.keys().hasAll(['uid', 'content', 'forumId']) &&
        request.resource.data.uid is string &&
        request.resource.data.forumId is string &&
        request.resource.data.content is string;
    }

    function forumExists() {
      return exists(/databases/$(database)/documents/forums/$(forumId));
    }

    allow create: if isSignedIn() && isVerifiedEmail() && commentFieldsAreValidTypes() && forumExists();

    allow get: if isSignedIn() && isVerifiedEmail() && forumExists(); // anyone can read

    allow update, delete: if isSignedIn() && isCommentOwner(); // only signed in user can update or delete

    allow list: if isSignedIn() && isVerifiedEmail(); // anyone can get a list of comments
  }

  // notification collections
  match /notifications/{notificationId} {
    function isNotificationOwner() {
      return request.auth.uid == resource.data.uid;
    }
    allow create, delete: if false;  // notifications are pushed by server, no delete

    allow read: if isSignedIn() && isNotificationOwner();

    allow update:
      if isSignedIn() && isVerifiedEmail() && isNotificationOwner() &&
      // user can only update the read status field of the notification
      request.resource.data.keys().hasOnly(['read']);
  }

  match /favoritedUsersList/{favoritedUserId}/favoritedBy/{favoritedByUserId} {
    function isSignedIn() {
      return request.auth != null;
    }

    function isVerifiedEmail() {
      return request.auth.token.email_verified == true; // Assuming you have this field set
    }

    function isFavoritedUser() {
      return request.auth.uid == favoritedUserId;
    }

    function isFavoritorUser() {
      return request.auth.uid == favoritedByUserId;
    }

    function isNotFavoritingSelf() {
      return request.auth.uid != favoritedUserId;
    }

    // Allow a user to favorite another user
    allow create: if isSignedIn() && isVerifiedEmail() && isNotFavoritingSelf();

    // Allow a favorited user to read the list of users who favorited them
    allow read: if isSignedIn() && isFavoritedUser();

    // Allow the favoritor to delete their favorite entry
    allow delete: if isSignedIn() && isFavoritorUser();

    allow update: if false;
  }

  match /ignoredUsersList/{ignoredByUserId}/ignored/{ignoredUserId} {
    function isIgnoringUser() {
      return request.auth.uid == ignoredByUserId;
    }

    function isIgnoredUser() {
      return request.auth.uid == ignoredUserId;
    }

    function isNotIgnoringSelf() {
      return request.auth.uid != ignoredUserId;
    }

    // Allow a user to ignore another user
    allow create: if isSignedIn() && isVerifiedEmail() && isIgnoringUser() && isNotIgnoringSelf();

    allow read: if isSignedIn() && isVerifiedEmail() && isIgnoringUser();

    allow delete: if isSignedIn() && isVerifiedEmail() && isIgnoringUser();

    allow update: if false;
  }

  // profile photo view allowed list collection
  match /profilePhotoViewAllowedList/{userId} {
    function isOwner() {
      return request.auth.uid == userId;
    }

    allow create: if isSignedIn() && isOwner();

    allow read: if isSignedIn() && isOwner();

    allow update: if isSignedIn() && isOwner();

    allow delete: if isSignedIn() && isOwner();
  }

  // account settings collection
  match /accountSettings/{userId} {
    function isOwner() {
      return request.auth.uid == userId;
    }

    allow read: if isSignedIn() && isOwner();

    allow update: if isSignedIn() && isOwner();

    // created automatically when user is created
    // delete is also automatically done when user is deleted
    allow create, delete: if false;
  }

  // notification settings collection
  match /notificationSettings/{userId} {
    function isOwner() {
      return request.auth.uid == userId;
    }

    allow read: if isSignedIn() && isOwner();

    allow update: if isSignedIn() && isOwner();

    // created automatically when user is created
    // delete is also automatically done when user is deleted
    allow create, delete: if false;
  }

  // account settings collection
  // This includes things like appear on search, etc.
  match /accountSettings/{userId} {
    function isOwner() {
      return request.auth.uid == userId;
    }

    allow read: if isSignedIn() && isOwner();

    allow update: if isSignedIn() && isOwner();

    // created automatically when user is created
    // delete is also automatically done when user is deleted
    allow create, delete: if false;
  }

  match /{document=**} {
    allow read, write: if true;
  }
}
