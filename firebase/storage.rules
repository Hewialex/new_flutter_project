rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    function isSignedIn() {
      return request.auth != null;
    }

    function isVerifiedEmail() {
      return request.auth.token.email_verified;
    }

    match /userProfileImages/thumbnails/{userId} {
      allow read: if isSignedIn() && isVerifiedEmail(); // allow read for all signed in users

      allow write: if false; // disallow write, thumbnail images are generated by the server
    }

    match /userProfileImages/{userId}{

      function isOwner() {
        return request.auth.uid == userId;
      }

      function isAllowedToView() {
        return get(/databases/$(database)/documents/profilePhotoViewAllowedList/$(userId)).data.allowedUsersIds.has(request.auth.uid);
      }

      function isAllowedImageType() {
        // Restrict file type to image/jpeg or image/png
        return request.resource.contentType.matches('image/.*') && 
            // Restrict file size to 5MB
            request.resource.size < 5 * 1024 * 1024;
      }

      // allow upload from the owner user only
      allow write: if isSignedIn() && isVerifiedEmail() && isOwner() && isAllowedImageType();

      // allow the owner to delete his/her own profile photo
      allow  delete: if isSignedIn() && isVerifiedEmail() && isOwner();

      // allow read from the owner user or from the allowed users
      allow read: if isSignedIn() && isVerifiedEmail() && (isOwner() || isAllowedToView());
    }

    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
